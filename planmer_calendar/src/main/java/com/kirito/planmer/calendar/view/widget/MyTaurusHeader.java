package com.kirito.planmer.calendar.view.widget;

import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.View;
import android.view.animation.*;
import androidx.annotation.ColorInt;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.kirito.planmer.calendar.R;
import com.scwang.smartrefresh.header.TaurusHeader;
import com.scwang.smartrefresh.header.internal.pathview.PathsDrawable;
import com.scwang.smartrefresh.layout.api.RefreshHeader;
import com.scwang.smartrefresh.layout.api.RefreshInternal;
import com.scwang.smartrefresh.layout.api.RefreshLayout;
import com.scwang.smartrefresh.layout.constant.SpinnerStyle;
import com.scwang.smartrefresh.layout.internal.InternalAbstract;
import com.scwang.smartrefresh.layout.util.SmartUtil;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * @auther kirito
 * @Date 2019-06-10
 * @NOTE 类说明
 */
public class MyTaurusHeader extends InternalAbstract implements RefreshHeader {
    protected static String[] airplanePaths = new String[]{
            "M419.278889 418.958676l-56.34325 56.343249-18.879972 18.879973c-1.008672 1.008672-2.029211 1.993611-3.109084 2.94295-0.474669 0.415336-0.949339 0.806938-1.424008 1.186673-2.207212 1.886811 1.459608-0.973072 0 0.071201s-2.990417 2.147879-4.544959 3.132817-3.358286 2.017345-5.102696 2.90735c-0.937472 0.474669-1.886811 0.913738-2.836149 1.364674 2.646282-1.246007-1.317207 0.474669-1.981744 0.700138a64.495696 64.495696 0 0 1-6.692838 1.791876c-0.498403 0.106801-1.008672 0.178001-1.507075 0.272935 2.373347-0.427202 0.593337 0 0.059334 0-1.424008 0.083067-2.836149 0.201734-4.272024 0.201735s-2.575081-0.094934-3.868555-0.166135c-1.922411-0.118667 1.70881 0.332269-0.237335 0-0.58147-0.094934-1.186673-0.201734-1.720676-0.320401a46.137859 46.137859 0 0 1-4.68736-1.186674 18.001834 18.001834 0 0 1-3.168418-1.186673 59.428601 59.428601 0 0 1-17.064363-12.471937q-12.151535-12.092201-24.255602-24.255603l-51.525357-51.525356-32.76405-32.764051a78.439107 78.439107 0 0 0-26.344148-17.21863c-27.293487-11.047929-56.177116 0.676404-74.262018 22.546794-9.184852 11.130996-15.818356 24.386137-15.687821 39.16022a57.411256 57.411256 0 0 0 9.327252 30.141502c5.102695 7.926978 11.866733 14.24008 18.523971 20.849851l31.055241 31.055241 50.516684 50.516684 64.471962 64.483829 72.861743 72.861742 75.614825 75.614825 72.885476 72.885476 64.519429 64.531296 50.587884 50.587885 31.067108 31.067107c6.645371 6.645371 13.053407 12.519404 21.241453 17.455965 20.173447 12.115935 45.497056 16.850761 67.937048 8.057512 27.447754-10.763127 52.035626-36.893674 52.296694-67.64038 0.213601-26.106813-15.36742-46.980397-32.882718-64.507562l-65.421301-65.445035c-14.24008-14.24008-28.966696-28.159758-42.803307-42.815174-0.925605-0.984939-1.803743-2.005478-2.670015-3.037883s-0.783204-1.091739 0.118667 0.201734c-0.593337-0.866272-1.257874-1.696943-1.863077-2.575081q-1.78001-2.575081-3.310818-5.328163c-0.557736-0.996806-1.044273-2.017345-1.566409-3.026017-0.237335-0.439069-0.427202-0.913738-0.640804-1.364675 0.961205 2.041078 0.166134 0.450936 0 0a58.301261 58.301261 0 0 1-2.195345-7.203107c-0.166134-0.723871-0.296668-1.459608-0.427203-2.183479 0.094934 0.51027 0.142401 2.195346 0-0.225468-0.083067-1.186673-0.166134-2.373347-0.178001-3.488819a31.173908 31.173908 0 0 1 3.963489-15.426754l-10.240991 5.933367c20.897317-2.729349 41.296232-10.110457 60.081271-19.461443 39.302621-19.568243 70.429062-51.916958 87.303557-92.56052a185.690643 185.690643 0 0 0 11.22593-38.519416c0.557736-3.109084 0.878138-6.277502 1.518942-9.374719 0.213601-1.044273 0.58147-2.029211 0.818804-3.061618 0.557736-2.373347-0.818805 2.029211-0.237334 0.58147a8.033778 8.033778 0 0 1 0.806938-1.388407c0.296668 0.106801-1.922411 2.195346-0.747605 0.984938a6.60977 6.60977 0 0 1 0.806938-0.806937c-3.370152 2.373347-0.925605 0.628937-0.130534 0.320401-3.844822 1.530809-1.186673 0.415336-0.249201 0.272935 2.100412-0.308535-2.622548-0.189868-1.186673 0.118668a9.647654 9.647654 0 0 0 1.483341-0.059334 11.961667 11.961667 0 0 0 1.186674 0c2.076678-0.142401-1.435875 0-1.257874-0.213601s2.373347 0.450936 2.622548 0.522136c2.136012 0.51027 4.10589 1.352808 6.182568 2.041078-3.156551-1.056139-0.154268 0 0.700137 0.367869s1.898677 0.937472 2.836149 1.424008c2.136012 1.12734 4.236424 2.373347 6.289369 3.56002 3.702421 2.29028 7.298041 4.746693 10.786861 7.357375l2.183479 1.637609c1.376541 1.020539-2.147879-1.720676 0.0712 0.059333 1.186673 0.961205 2.373347 1.910544 3.56002 2.895483 4.972161 4.129623 9.374719 8.93565 13.943412 13.504343l37.071675 37.083542 64.293961 64.293961a99.561893 99.561893 0 0 0 34.603394 22.807861 64.305828 64.305828 0 0 0 39.397555 2.373347c17.633966-4.746693 31.862179-17.361031 42.435438-31.802845 18.262903-24.92014 18.167969-56.556851 3.714288-83.138334a81.524458 81.524458 0 0 0-13.053407-18.227303c-8.306713-8.425381-16.720227-16.720227-25.086274-25.086274l-53.127365-53.127365-72.719342-72.731209-83.885938-83.885938-86.306752-86.306751-80.919254-80.954855-66.833442-66.833442-44.286649-44.286649c-5.660432-5.660432-11.130996-11.641265-17.016896-17.064363-18.986773-17.539032-45.615723-22.938396-68.696519-9.647654-16.02009 9.220452-29.773634 24.92014-35.422199 42.72024a59.2506 59.2506 0 0 0 1.969878 39.919691c4.556826 11.19033 11.403931 20.268381 19.829311 28.693761l44.53585 44.535851 58.953931 58.953931c5.541764 5.541764 10.60886 11.036062 14.157013 18.120502a32.847118 32.847118 0 0 1 3.465086 15.984489c0 0.890005-0.083067 1.78001-0.1424 2.658149 0 0.367869-0.320402 2.575081-0.083067 1.020539 0.178001-1.186673-0.51027 2.373347-0.628937 2.931083a54.681907 54.681907 0 0 1-2.539481 7.832044c1.103606-2.717482-0.557736 1.056139-0.890005 1.696943q-0.783204 1.530809-1.649476 3.01415-1.649476 2.848016-3.56002 5.529898c-0.272935 0.367869-0.557736 0.735737-0.818805 1.115473-1.340941 1.922411 1.542675-1.70881 0.486536-0.628937-0.51027 0.522136-0.949339 1.186673-1.435874 1.732543-0.759471 0.878138-1.542675 1.74441-2.373347 2.575081-0.462803 0.474669-0.949339 0.937472-1.424008 1.412141q-5.185762 5.162029-10.347792 10.347792l-40.584228 40.584228-23.733466 23.733467c-10.810594 10.810594 5.933367 27.602022 16.779561 16.77956l60.413539-60.413539c5.553631-5.553631 11.356464-10.952995 16.684627-16.732094 14.513015-15.723422 22.701061-37.071675 18.298503-58.455528-3.227751-15.628488-13.433142-27.839356-24.398004-38.816085l-26.581482-26.581483-53.83937-53.720702c-8.876317-8.876317-17.966234-17.586499-26.652683-26.652683-0.783204-0.806938-1.507075-1.661343-2.242812-2.515747-0.367869-0.427202-1.530809-2.112279-0.332269-0.367869 1.340941 1.958011-0.415336-0.593337-0.676404-0.961205q-1.685076-2.373347-3.156551-4.865361c-1.079873-1.827477-1.969878-3.738021-2.954816-5.612965s0 0 0.1068 0.332269c-0.237335-0.58147-0.462803-1.186673-0.68827-1.74441q-0.759471-2.041078-1.364675-4.14149-0.486536-1.696943-0.854404-3.417619c-0.118667-0.58147-0.628937-4.604293-0.391603-1.981745a60.437273 60.437273 0 0 1-0.083067-8.781382c0.130534-2.373347 0.094934-0.830671 0-0.296669 0.130534-0.783204 0.284802-1.566409 0.450936-2.373346 0.308535-1.400275 0.688271-2.800549 1.12734-4.165224a35.718867 35.718867 0 0 1 4.24829-8.840716 60.377939 60.377939 0 0 1 15.426754-16.482893c5.933367-4.366958 10.086723-6.324969 17.171163-7.570976 1.412141-0.249201-0.213601 0-0.415336 0 0.712004-0.059334 1.424008-0.118667 2.147879-0.154267a39.421288 39.421288 0 0 1 4.165223 0c0.676404 0 1.340941 0.106801 2.017345 0.178001-0.130534 0-2.064812-0.332269-0.700137-0.071201s2.824283 0.569603 4.224557 0.961206c1.186673 0.332269 2.373347 0.771338 3.56002 1.186673 2.005478 0.65267-1.542675-0.854405 0.866271 0.367869a67.201311 67.201311 0 0 1 6.170702 3.429486c0.747604 0.474669 1.471475 0.984939 2.195345 1.483341 0.391602 0.272935 0.759471 0.605203 1.186674 0.842539 1.293474 0.771338-1.839344-1.602009-0.795071-0.605204s2.373347 1.958011 3.476952 3.01415 2.171612 2.219079 3.251485 3.334552c6.146968 6.384303 12.543137 12.543137 18.808773 18.808773l44.096781 44.227315 62.893686 62.893687 74.879088 74.879087 80.147917 80.147917 78.747642 78.700176 70.559597 70.559596 55.702446 55.702446 34.140592 34.140592c2.29028 2.29028 4.628026 4.556826 6.882705 6.882705 0.403469 0.415336 0.806938 0.830671 1.186673 1.269741 0.569603 0.628937 1.068006 1.317207 1.613876 1.958011 1.103606 1.26974-1.969878-2.717482-0.344135-0.427203 0.462803 0.65267 0.937472 1.293474 1.400274 1.946145a87.742626 87.742626 0 0 1 6.384303 10.68006c0.557736 1.091739 1.056139 2.219079 1.590142 3.322685 0.878138 1.85121-0.557736-1.602009 0.486536 1.186673a81.310857 81.310857 0 0 1 2.539481 7.796444q0.54587 2.076678 0.961206 4.188957c0.130534 0.65267 0.61707 3.927889 0.356002 1.756277a59.891403 59.891403 0 0 1 0.379735 9.801921 49.970814 49.970814 0 0 1-3.56002 15.770889 65.919704 65.919704 0 0 1-13.528076 19.734378 57.090854 57.090854 0 0 1-16.67276 12.234602c-1.874944 0.913738 1.281607-0.462803-0.593337 0.284801-0.747604 0.296668-1.507075 0.569603-2.278413 0.818805-1.305341 0.439069-2.622548 0.818805-3.951622 1.186673-0.498403 0.118667-4.82976 0.913738-2.373347 0.58147a43.064375 43.064375 0 0 1-4.90096 0.344135q-1.863077 0-3.738021-0.0712c-0.688271 0-4.628026-0.557736-2.041079-0.130534a62.288483 62.288483 0 0 1-7.974444-1.886811q-1.886811-0.569603-3.738021-1.257873l-1.815611-0.700138c0.391602 0.154268 2.183479 1.008672 0.189868 0.071201-2.219079-1.056139-4.414425-2.124145-6.550437-3.334552q-2.764949-1.566409-5.41123-3.346419-1.186673-0.759471-2.266546-1.566409c-0.486536-0.344135-3.298952-2.468281-1.70881-1.186673s-0.783204-0.640804-1.091739-0.901872l-1.542675-1.305341c-0.961205-0.830671-1.910544-1.685076-2.83615-2.563214-1.12734-1.068006-2.207212-2.183479-3.298952-3.287085l-24.208136-24.208136-73.882281-73.799215c-14.714749-14.714749-29.939768-29.120964-49.389345-37.558211-8.38978-3.643087-18.025568-6.550437-27.056152-3.358285-11.771799 4.165223-15.035151 14.738483-16.898228 25.916945a187.221452 187.221452 0 0 1-9.790055 36.395271c-0.462803 1.186673-0.949339 2.373347-1.435875 3.631221 0.830671-2.041078-0.771338 1.768143-0.973072 2.207212q-1.756277 3.916022-3.714287 7.725243a160.936638 160.936638 0 0 1-8.306714 14.240081q-2.029211 3.120951-4.21269 6.146967c-0.664537 0.925605-1.352808 1.839344-2.029211 2.753083-1.305341 1.791877-0.178001 0.237335 0.083067-0.094934l-1.495209 1.88681q-4.746693 5.8503-9.956189 11.237797-4.865361 5.007761-10.146057 9.58832-2.480147 2.147879-5.031495 4.200824l-1.352807 1.079873c-1.293474 1.044273 1.685076-1.26974 0.367868-0.284802-1.020539 0.771338-2.029211 1.530809-3.061617 2.29028a185.963578 185.963578 0 0 1-21.36012 13.456875q-5.031495 2.705615-10.205391 5.126429c-1.590142 0.735737-3.180285 1.447741-4.746693 2.159745l-1.257874 0.54587c-1.376541 0.628937 2.373347-0.949339 0.973072-0.415336-0.925605 0.356002-1.839344 0.759471-2.753082 1.12734a195.8011 195.8011 0 0 1-30.616172 9.493387c-2.373347 0.534003-4.853494 0.961205-7.286174 1.400274l-0.700137 0.106801c4.248291-0.795071 3.073484-0.878138-0.261068 0-8.781383 2.373347-12.270202 15.604754-13.492476 23.638533-3.156551 20.84985 5.874033 41.153831 20.481982 55.773646l15.343686 15.343687 74.297617 74.28575 22.261992 22.261992c1.281607 1.26974 2.563214 2.551348 3.773621 3.880422q1.447741 1.602009 2.824283 3.287085c0.332269 0.403469 1.886811 2.373347 0.700137 0.854405s0.890005 1.186673 1.186673 1.708809a85.701548 85.701548 0 0 1 7.036973 11.676866c0.486536 0.984939 0.937472 1.981744 1.388408 2.97855 0.723871 1.590142-0.700137-1.827477-0.083067-0.178001 0.225468 0.605203 0.462803 1.186673 0.68827 1.827477a61.873148 61.873148 0 0 1 2.242813 7.66591c0.261068 1.186673 0.474669 2.373347 0.664537 3.56002-0.427202-2.563214 0.083067 1.246007 0.130534 2.041078a45.888658 45.888658 0 0 1-0.272935 8.638982c0.296668-2.219079-0.403469 1.661343-0.58147 2.373346q-0.557736 2.29028-1.329074 4.521226c-0.261068 0.759471-0.534003 1.530809-0.854405 2.278413 0.118667-0.272935 0.534003-1.186673-0.059333 0a57.980859 57.980859 0 0 1-2.800549 5.185762 64.377028 64.377028 0 0 1-15.91329 17.206763 56.390717 56.390717 0 0 1-17.432231 9.267919c-1.447741 0.450936-2.919216 0.842538-4.390691 1.186674-0.367869 0.083067-4.960295 0.866272-2.990417 0.628936a56.331383 56.331383 0 0 1-9.493387 0.332269 64.210894 64.210894 0 0 1-4.533092-0.367869c2.373347 0.296668-1.768143-0.356002-2.29028-0.462802a70.749464 70.749464 0 0 1-8.140579-2.195346c-1.26974-0.427202-2.515747-0.913738-3.773621-1.376541-2.017345-0.747604 1.507075 0.747604-1.186673-0.498403-2.278413-1.068006-4.521225-2.183479-6.704704-3.429486a107.41767 107.41767 0 0 1-9.042451-5.933367c-2.064812-1.459608 1.874944 1.566409 0.640803 0.498403-0.391602-0.332269-0.806938-0.640804-1.186673-0.973072s-0.901872-0.747604-1.329074-1.186673-0.640804-0.640804-0.973072-0.961206c-2.515747-2.468281-4.984028-4.984028-7.476042-7.476042l-35.125531-35.12553-56.426317-56.426317-71.010532-71.010533-78.498441-78.46284-80.076717-80.076717-74.546819-74.558686-62.33595-62.347817-43.408511-43.40851c-5.933367-5.933367-11.736199-11.973534-17.8001-17.8001-1.673209-1.602009-3.322685-3.180285-4.841627-4.936561-0.54587-0.628937-1.056139-1.293474-1.590142-1.922411 1.400275 1.661343 0.842538 1.186673 0-0.118667a62.086749 62.086749 0 0 1-3.56002-5.684166c-0.474669-0.878138-0.913738-1.78001-1.352808-2.681881-1.26974-2.586948 0.415336 1.518942-0.522136-1.305341a67.64038 67.64038 0 0 1-1.958011-7.321774c-0.379735-1.74441 0.154268 2.017345 0 0.201734 0-0.676404-0.118667-1.352808-0.154267-2.029211q-0.083067-1.827477 0-3.654954c0-0.712004 0.094934-1.424008 0.154267-2.147879 0 0.534003-0.474669 2.183479 0-0.130534 0.379735-1.720676 0.747604-3.405752 1.281607-5.090829a28.361493 28.361493 0 0 1 3.370153-7.22684 51.572823 51.572823 0 0 1 6.586037-8.781383c5.399364-5.862166 11.546332-11.000462 18.915573-14.24008a69.895059 69.895059 0 0 1 7.392974-2.159745c0.58147-0.130534 1.186673-0.237335 1.756277-0.332269-1.981744 0.332269-0.094934 0 0.296668 0 1.673209-0.094934 3.334552-0.189868 5.019628-0.154268 0.723871 0 1.447741 0.0712 2.171613 0.106801 0.356002 0 2.610681 0.237335 1.068006 0a23.982668 23.982668 0 0 0 2.515747 0.474669 60.840742 60.840742 0 0 1 7.998178 2.373347c2.586948 0.937472-0.818805-0.522136 0.984939 0.415336 1.032406 0.534003 2.088545 1.008672 3.120951 1.554542q2.764949 1.471475 5.387497 3.204018 1.186673 0.747604 2.242813 1.542675c0.462803 0.332269 2.373347 1.874944 0.700137 0.486536s1.186673 0.973072 1.81561 1.566409c0.462803 0.427202 0.913738 0.854405 1.364674 1.293474 10.02739 9.754455 19.805578 19.805578 29.666834 29.666833l54.444572 54.551373c19.675044 19.675044 38.970352 44.974919 68.554119 48.048404 19.259708 1.993611 38.816085-7.12004 52.415361-20.410782 6.087634-5.933367 12.021001-12.032868 18.025568-18.037434l58.004593-58.004593c10.810594-10.810594-5.933367-27.602022-16.779561-16.779561z",
            "M364.739383 76.330484A483.889785 483.889785 0 0 0 233.018643 10.95665c-13.219541-4.165223-26.62895-7.618443-40.157026-10.57326a11.973534 11.973534 0 0 0-14.002745 6.870839c-2.147879 5.102695-0.462803 12.187135 4.853494 14.82155a25.881345 25.881345 0 0 0 5.933367 2.29028c5.826566 1.257874 11.629399-1.257874 14.002745-6.870839 2.159745-5.114562 0.450936-12.175268-4.853494-14.82155a25.584677 25.584677 0 0 0-5.933367-2.29028c-8.306713-1.78001-17.633966 5.506164-14.596082 14.596082 3.654954 10.952995 4.402558 22.546793 8.816983 33.333654 1.293474 3.156551 2.681882 6.265635 4.117757 9.362853 0.522136 1.186673 1.056139 2.266546 1.566408 3.405752a8.888183 8.888183 0 0 1 0.759471 1.70881c-0.213601-1.435875-0.462803-1.186673 0.059334 0.178001a53.246032 53.246032 0 0 1 2.373347 7.654043c0.142401 0.628937 0.261068 1.26974 0.391602 1.910544 0.213601 1.044273-0.284802 1.471475 0-0.178001 0.450936-2.634415 0.415336-1.186673 0.237335-0.54587a9.113651 9.113651 0 0 1-0.320402 1.103607q-0.450936 1.293474 0.474669-1.186674c-0.094934 0-0.676404 1.364674-0.735737 1.186674s2.041078-2.088545 0.522136-0.759471c-0.344135 0.296668-0.700137 0.664537-1.020539 0.984939-1.483342 1.459608 0.522136-0.61707 0.700137-0.534003-0.356002-0.178001-5.138296 2.836149-5.850299 3.144684a10.68006 10.68006 0 0 0-1.352808 0.593337c2.076678-1.352808 1.685076-0.712004 0.818805-0.344136-0.628937 0.261068-3.239618 0.949339-3.48882 1.471475 0.344135-0.735737 2.136012-0.866272 0.486536-0.320402-2.551348 0.842538-5.055228 1.886811-7.535376 2.919217a176.066723 176.066723 0 0 0-28.978563 15.082618c-35.01873 22.902795-61.552746 57.387522-78.178039 95.527203-1.364674 3.144684-3.263352 6.443636-4.105889 9.790055a6.526703 6.526703 0 1 0 1.483341-2.94295q2.373347-1.732543 0.771338-0.818804l1.578275-0.712004c0.0712 0-1.281607 0.237335-1.376541 0.332268q2.741215-0.308535 1.317208-0.213601H69.044122c-2.373347 0 2.492014 0.593337 0 0-1.186673-0.261068-2.254679-0.486536-3.382019-0.806938-3.156551-0.913738-6.289369-1.922411-9.398453-2.97855-13.409409-4.556826-26.415348-10.205391-39.848491-14.702882-10.086723-3.382019-18.322236 8.816983-13.397542 17.432231 2.242813 3.916022 6.253768 5.814699 10.347792 7.12004 5.078962 1.661343 9.896856 1.186673 14.157013-2.480147 3.975356-3.405752 4.319491-10.06299 1.85121-14.382481-2.693748-4.746693-8.188046-6.123234-12.958473-7.725244-4.485625-1.507075-9.730721 0.700137-12.471937 4.248291a12.068468 12.068468 0 0 0-0.925605 13.183941c5.30443 10.300325 24.398004 13.777277 28.005491 0 2.741215-10.430859-6.716571-14.845283-14.607949-17.491565a11.783666 11.783666 0 0 0-11.546331 3.04975c-3.037884 3.346419-3.714288 7.440442-2.931083 11.653132 1.186673 5.933367 1.863077 12.080335 3.66682 17.906901 0.403469 1.281607 0.866272 2.539481 1.376541 3.785488 0.427202 1.044273 1.008672 2.598815 1.602009 3.749888 1.246007 2.373347-0.344135-0.605203-0.272935-0.925606-0.249201 1.091739 0.890005 3.726154 1.186674 4.746694q5.328163 17.942501 12.115934 35.410332a542.582648 542.582648 0 0 0 33.072586 69.895059q10.502059 18.642638 22.309459 36.490205c3.405752 5.173896 10.68006 7.855777 16.233691 4.260158 5.162029-3.334552 7.915111-10.68006 4.260157-16.233692a583.985681 583.985681 0 0 1-37.237809-64.887297q-3.987222-8.164313-7.689643-16.471026-0.984939-2.195346-1.934278-4.402558l-0.842538-1.958011c-0.130534-0.296668-1.008672-2.373347-0.450935-1.044273 0.664537 1.578276-0.688271-1.649476-0.640804-1.542675l-0.818805-1.981745q-1.008672-2.468281-2.005478-4.960294-6.811505-17.14743-12.246468-34.793262c-0.712004-2.373347-1.459608-4.663626-2.017345-7.036973-0.154268-0.65267-0.261068-1.317207-0.450936-1.958011a20.493848 20.493848 0 0 0-1.661343-3.726155c-1.447741-2.836149 0.640804 2.171612-0.379735-0.854404-2.183479-6.443636-3.002284-13.172074-4.307624-19.817445L10.220724 200.539582l2.634415 0.901871c1.661343 0.58147 0.605203 0.925605-0.806938-0.379735q0.427202 0.189868 0.830672 0.415336 1.530809 0.973072-1.649476-1.269741l-3.049751-5.233229 0.071201 0.166134v-6.313102 0.154267l3.04975-5.233229-0.166134 0.130534 5.233229-3.04975a9.861255 9.861255 0 0 1 4.260158 0q2.373347 1.186673 1.186673 0.450935t0.973072 0.806938q1.625742 2.492014 0.830671 1.032406L10.220724 200.539582c1.376541 0.462803 2.729349 0.973072 4.094023 1.435874 1.74441 0.593337-2.610681-1.542675-1.091739-0.403469l-4.260157-4.260157 1.85121-14.382481 8.389781-3.476952c-0.094934 0 3.963489 0.866272 2.100411 0.261068-0.498403-0.166134-1.020539-0.284802-1.518942-0.439069-0.249201-0.0712-0.486536-0.189868-0.735737-0.249202-1.376541-0.344135 1.839344 0.806938 1.78001 0.771338a5.933367 5.933367 0 0 1-0.735737-0.367869 15.023284 15.023284 0 0 1 3.56002 3.56002L10.220724 200.539582c12.400736 4.153357 24.445471 9.291652 36.786874 13.634876 11.178463 3.939755 25.299875 9.434053 36.430871 2.373347 3.927889-2.468281 5.933367-5.933367 7.689643-10.181657 0.272935-0.676404 1.81561-4.568692 0.664537-1.67321 0.54587-1.376541 1.186673-2.717482 1.768144-4.070289q3.251485-7.298041 6.977639-14.370614a227.366611 227.366611 0 0 1 16.779561-27.103619q1.032406-1.435875 2.088545-2.848016l1.068006-1.412141c1.293474-1.70881 0 0-0.237335 0.308535 1.590142-2.266546 3.500686-4.390691 5.292563-6.491104q5.126429-6.040167 10.68006-11.653132t11.617532-10.68006q1.507075-1.26974 3.037884-2.515747l1.364674-1.09174c1.768143-1.412141-0.201734 0-0.320402 0.237335 0.534003-0.878138 2.373347-1.78001 3.156552-2.373347q1.768143-1.293474 3.56002-2.539481a174.773249 174.773249 0 0 1 27.293486-15.284352c2.670015-1.186673-1.685076 0.664537 0 0l1.661343-0.676404q1.874944-0.747604 3.773621-1.459608c1.12734-0.415336 2.266546-0.795071 3.393886-1.186673l2.836149-1.186674-1.530808 0.640804c1.400275-0.569603 2.788682-1.186673 4.17709-1.756277 4.746693-2.005478 9.422186-4.402558 13.053406-8.188046a25.371076 25.371076 0 0 0 5.933367-10.146057c1.376541-4.497492 0.700137-9.078051-0.225468-13.599276-1.388408-6.847105-4.497492-13.255141-7.416708-19.556377-0.664537-1.435875-1.305341-2.871749-1.969878-4.307624-1.293474-2.812416 0.557736 1.542675-0.118667-0.272935-0.344135-0.925605-0.723871-1.827477-1.05614-2.753082a78.806976 78.806976 0 0 1-2.670015-9.564587c-1.495208-6.728438-2.539481-13.563676-4.746693-20.173447l-14.596082 14.596082c0.901872 0.189868 2.800549 1.186673 0.296668-0.1068l9.149252-21.692389c-0.890005-0.189868-2.812416-1.186673-0.296669 0.106801l-9.149251 21.692388a454.021218 454.021218 0 0 1 69.871326 21.122786c2.598815 1.020539 5.185762 2.076678 7.760844 3.144684 0.403469 0.166134 2.100412 0.878138 0.059333 0l1.922411 0.818805 4.746693 2.088545q8.140579 3.56002 16.138758 7.523509 15.996357 7.820177 31.387509 16.827028 17.633966 10.312191 34.413527 22.060257c5.102695 3.56002 13.409409 1.091739 16.233691-4.260157 3.215885-6.075767 1.186673-12.42447-4.260157-16.233692zM317.34365 214.922062c19.817445 2.373347 34.164325 21.36012 31.541777 40.975831a36.419005 36.419005 0 0 1-64.495696 17.859433l1.530809 5.767233 0.237335-0.747604-9.920589 2.622548c14.655416 12.377003 17.989968 33.440455 7.001372 49.389344-10.407125 15.118218-31.624844 19.710644-47.466933 10.75126a36.608872 36.608872 0 0 1-18.334103-27.198553c-0.379735-3.180285-2.456414-5.933367-5.933367-5.933366-2.919216 0-6.313102 2.729349-5.933366 5.933366a49.270677 49.270677 0 0 0 19.627577 34.413527 47.751735 47.751735 0 0 0 33.226853 8.959384c24.516671-2.705615 43.906913-23.852134 43.361044-48.760408a48.57054 48.57054 0 0 0-17.099963-36.003668c-3.441353-2.90735-8.472848-1.85121-9.920589 2.622548-2.112279 6.550437 7.12004 12.721138 11.866733 15.853955a46.624395 46.624395 0 0 0 16.613427 6.787772 48.748541 48.748541 0 0 0 35.12553-6.301236c21.656788-13.682344 29.06163-42.72024 16.209958-65.029698-7.879511-13.646743-21.775456-22.024657-37.237809-23.852134-3.192151-0.379735-5.933367 3.002284-5.933367 5.933366 0 3.56002 2.741215 5.553631 5.933367 5.933367z"
    };

    protected static int[] airplaneColors = new int[]{
            0xffffffff
    };
    protected static String[] cloudPaths = new String[]{
            "M551.81,1.01A65.42,65.42 0,0 0,504.38 21.5A50.65,50.65 0,0 0,492.4 20A50.65,50.65 0,0 0,441.75 70.65A50.65,50.65 0,0 0,492.4 121.3A50.65,50.65 0,0 0,511.22 117.64A65.42,65.42 0,0 0,517.45 122L586.25,122A65.42,65.42 0,0 0,599.79 110.78A59.79,59.79 0,0 0,607.81 122L696.34,122A59.79,59.79 0,0 0,711.87 81.9A59.79,59.79 0,0 0,652.07 22.11A59.79,59.79 0,0 0,610.93 38.57A65.42,65.42 0,0 0,551.81 1.01zM246.2,1.71A54.87,54.87 0,0 0,195.14 36.64A46.78,46.78 0,0 0,167.77 27.74A46.78,46.78 0,0 0,120.99 74.52A46.78,46.78 0,0 0,167.77 121.3A46.78,46.78 0,0 0,208.92 96.74A54.87,54.87 0,0 0,246.2 111.45A54.87,54.87 0,0 0,268.71 106.54A39.04,39.04 0,0 0,281.09 122L327.6,122A39.04,39.04 0,0 0,343.38 90.7A39.04,39.04 0,0 0,304.34 51.66A39.04,39.04 0,0 0,300.82 51.85A54.87,54.87 0,0 0,246.2 1.71z",
            "m506.71,31.37a53.11,53.11 0,0 0,-53.11 53.11,53.11 53.11,0 0,0 15.55,37.5h75.12a53.11,53.11 0,0 0,1.88 -2.01,28.49 28.49,0 0,0 0.81,2.01h212.96a96.72,96.72 0,0 0,-87.09 -54.85,96.72 96.72,0 0,0 -73.14,33.52 28.49,28.49 0,0 0,-26.74 -18.74,28.49 28.49,0 0,0 -13.16,3.23 53.11,53.11 0,0 0,0.03 -0.66,53.11 53.11,0 0,0 -53.11,-53.11zM206.23,31.81a53.81,53.81 0,0 0,-49.99 34.03,74.91 74.91,0 0,0 -47.45,-17 74.91,74.91 0,0 0,-73.54 60.82,31.3 31.3,0 0,0 -10.17,-1.73 31.3,31.3 0,0 0,-26.09 14.05L300.86,121.98a37.63,37.63 0,0 0,0.2 -3.85,37.63 37.63,0 0,0 -37.63,-37.63 37.63,37.63 0,0 0,-3.65 0.21,53.81 53.81,0 0,0 -53.54,-48.9z",
            "m424.05,36.88a53.46,53.46 0,0 0,-40.89 19.02,53.46 53.46,0 0,0 -1.34,1.76 62.6,62.6 0,0 0,-5.39 -0.27,62.6 62.6,0 0,0 -61.36,50.17 62.6,62.6 0,0 0,-0.53 3.51,15.83 15.83,0 0,0 -10.33,-3.84 15.83,15.83 0,0 0,-8.06 2.23,21.1 21.1,0 0,0 -18.31,-10.67 21.1,21.1 0,0 0,-19.47 12.97,21.81 21.81,0 0,0 -6.56,-1.01 21.81,21.81 0,0 0,-19.09 11.32L522.84,122.07a43.61,43.61 0,0 0,-43.11 -37.35,43.61 43.61,0 0,0 -2.57,0.09 53.46,53.46 0,0 0,-53.11 -47.93zM129.08,38.4a50.29,50.29 0,0 0,-50.29 50.29,50.29 50.29,0 0,0 2.37,15.06 15.48,15.83 0,0 0,-5.87 1.68,15.48 15.83,0 0,0 -0.98,0.58 16.53,16.18 0,0 0,-0.19 -0.21,16.53 16.18,0 0,0 -11.86,-4.91 16.53,16.18 0,0 0,-16.38 14.13,20.05 16.18,0 0,0 -14.97,7.04L223.95,122.07a42.56,42.56 0,0 0,1.14 -9.56,42.56 42.56,0 0,0 -42.56,-42.56 42.56,42.56 0,0 0,-6.58 0.54,50.29 50.29,0 0,0 -0,-0.01 50.29,50.29 0,0 0,-46.88 -32.07zM631.67,82.61a64.01,64.01 0,0 0,-44.9 18.42,26.73 26.73,0 0,0 -10.67,-2.24 26.73,26.73 0,0 0,-22.72 12.71,16.88 16.88,0 0,0 -0.25,-0.12 16.88,16.88 0,0 0,-6.57 -1.33,16.88 16.88,0 0,0 -16.15,12.03h160.36a64.01,64.01 0,0 0,-59.1 -39.46z"
    };
    protected static int[] cloudColors = new int[]{
            0xaac7dcf1, 0xdde8f3fd, 0xfffdfdfd
    };
    //</editor-fold>

    //<editor-fold desc="Field">
    protected static final float SCALE_START_PERCENT = 0.5f;
    protected static final int ANIMATION_DURATION = 1000;

    protected static final float SIDE_CLOUDS_INITIAL_SCALE = 0.6f;//1.05f;
    protected static final float SIDE_CLOUDS_FINAL_SCALE = 1f;//1.55f;

    protected static final float CENTER_CLOUDS_INITIAL_SCALE = 0.8f;//0.8f;
    protected static final float CENTER_CLOUDS_FINAL_SCALE = 1f;//1.30f;

    protected static final Interpolator ACCELERATE_DECELERATE_INTERPOLATOR = new AccelerateDecelerateInterpolator();

    // Multiply with this animation interpolator time
    protected static final int LOADING_ANIMATION_COEFFICIENT = 80;
    protected static final int SLOW_DOWN_ANIMATION_COEFFICIENT = 6;
    // Amount of lines when is going lading animation
    protected static final int WIND_SET_AMOUNT = 10;
    protected static final int Y_SIDE_CLOUDS_SLOW_DOWN_COF = 4;
    protected static final int X_SIDE_CLOUDS_SLOW_DOWN_COF = 2;
    protected static final int MIN_WIND_LINE_WIDTH = 50;
    protected static final int MAX_WIND_LINE_WIDTH = 300;
    protected static final int MIN_WIND_X_OFFSET = 1000;
    protected static final int MAX_WIND_X_OFFSET = 2000;
    protected static final int RANDOM_Y_COEFFICIENT = 5;

    protected Drawable mAirplane;
    protected Drawable mCloudCenter;
    protected Matrix mMatrix;
    protected float mPercent;
    protected int mHeaderHeight;
    protected Animation mAnimation;

    protected boolean isRefreshing = false;
    protected float mLoadingAnimationTime;
    protected float mLastAnimationTime;

    protected Random mRandom;
//    private boolean mEndOfRefreshing;

    //KEY: Y position, Value: X offset of wind
    protected Map<Float, Float> mWinds;
    protected Paint mWindPaint;
    protected float mWindLineWidth;
    protected boolean mNewWindSet;
    protected boolean mInverseDirection;
    protected float mFinishTransformation;

    protected enum AnimationPart {
        FIRST,
        SECOND,
        THIRD,
        FOURTH
    }
    //</editor-fold>

    //<editor-fold desc="View">
    public MyTaurusHeader(Context context) {
        this(context, null);
    }

    public MyTaurusHeader(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public MyTaurusHeader(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);

        final View thisView = this;

        thisView.setMinimumHeight(SmartUtil.dp2px(100));

        mMatrix = new Matrix();
        mWinds = new HashMap<>();
        mRandom = new Random();

        mWindPaint = new Paint();
        mWindPaint.setColor(0xffffffff);
        mWindPaint.setStrokeWidth(SmartUtil.dp2px(3));
        mWindPaint.setAlpha(50);

        mSpinnerStyle = SpinnerStyle.Scale;

        //<editor-fold desc="setupAnimations">
        mAnimation = new Animation() {
            @Override
            public void applyTransformation(float interpolatedTime, @NonNull Transformation t) {
                /*SLOW DOWN ANIMATION IN {@link #SLOW_DOWN_ANIMATION_COEFFICIENT} time */
                mLoadingAnimationTime = LOADING_ANIMATION_COEFFICIENT * (interpolatedTime / SLOW_DOWN_ANIMATION_COEFFICIENT);
                thisView.invalidate();
            }
        };
        mAnimation.setRepeatCount(Animation.INFINITE);
        mAnimation.setRepeatMode(Animation.REVERSE);
        mAnimation.setInterpolator(ACCELERATE_DECELERATE_INTERPOLATOR);
        mAnimation.setDuration(ANIMATION_DURATION);
        //</editor-fold>

        //<editor-fold desc="setupPathDrawable">
        PathsDrawable airplane = new PathsDrawable();
        if (!airplane.parserPaths(airplanePaths)) {
            airplane.declareOriginal(0, 0, SmartUtil.dp2px(520), SmartUtil.dp2px(440));
        }
//        airplane.printOriginal("airplane");
        airplane.parserColors(airplaneColors);

        PathsDrawable cloudCenter = new PathsDrawable();
        if (!cloudCenter.parserPaths(cloudPaths)) {
            cloudCenter.declareOriginal(-1, 1, 761, 121);
        }
//        cloudCenter.printOriginal("cloudCenter");
        cloudCenter.parserColors(cloudColors);

        mAirplane = airplane;
        mCloudCenter = cloudCenter;
        mAirplane.setBounds(0, 0, SmartUtil.dp2px(50), SmartUtil.dp2px(50));
        mCloudCenter.setBounds(0, 0, SmartUtil.dp2px(260), SmartUtil.dp2px(45));
        //</editor-fold>

        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.TaurusHeader);

        int primaryColor = ta.getColor(R.styleable.TaurusHeader_thPrimaryColor, 0);
        if (primaryColor != 0) {
            thisView.setBackgroundColor(primaryColor);
        } else {
            thisView.setBackgroundColor(0xff11bbff);
        }

        ta.recycle();

    }

    //</editor-fold>

    //<editor-fold desc="RefreshHeader">

    @Override
    public void onMoving(boolean isDragging, float percent, int offset, int height, int maxDragHeight) {
        mPercent = percent;
        mHeaderHeight = height;
        if (isDragging) {
            mFinishTransformation = 0;
        }
    }

//    @Override
//    public void onPulling(float percent, int offset, int height, int maxDragHeight) {
//        mPercent = percent;
//        mHeaderHeight = height;
//        mFinishTransformation = 0;
//    }
//
//    @Override
//    public void onReleasing(float percent, int offset, int height, int maxDragHeight) {
//        mPercent = percent;
//        mHeaderHeight = height;
//    }

    @Override
    public void onStartAnimator(@NonNull RefreshLayout layout, int height, int maxDragHeight) {
        isRefreshing = true;
        mFinishTransformation = 0;
        final View thisView = this;
        thisView.startAnimation(mAnimation);
    }

    @Override
    public int onFinish(@NonNull RefreshLayout layout, boolean success) {
        final View thisView = this;
        thisView.clearAnimation();
        if (success) {
            thisView.startAnimation(new Animation() {
                {
                    super.setDuration(100);
                    super.setInterpolator(new AccelerateInterpolator());
                }

                @Override
                protected void applyTransformation(float interpolatedTime, Transformation t) {
                    if (interpolatedTime == 1) {
                        isRefreshing = false;
                    }
                    mFinishTransformation = interpolatedTime;
                    thisView.invalidate();
                }
            });
            return 200;
        } else {
            isRefreshing = false;
            return 0;
        }
    }

    /**
     * @param colors 对应Xml中配置的 srlPrimaryColor srlAccentColor
     * @deprecated 请使用 {@link RefreshLayout#setPrimaryColorsId(int...)}
     */
    @Override
    @Deprecated
    public void setPrimaryColors(@ColorInt int... colors) {
        final View thisView = this;
        thisView.setBackgroundColor(colors[0]);
    }
//
//    @NonNull
//    @Override
//    public SpinnerStyle getSpinnerStyle() {
//        return SpinnerStyle.Scale;
//    }
    //</editor-fold>

    //<editor-fold desc="draw">

    @Override
    protected void dispatchDraw(Canvas canvas) {

        final View thisView = this;
        final int width = thisView.getWidth();
        final int height = thisView.getHeight();
        if (isRefreshing) {
            // Set up new set of wind
            while (mWinds.size() < WIND_SET_AMOUNT) {
                float y = (float) (mHeaderHeight / (Math.random() * RANDOM_Y_COEFFICIENT));
                float x = random(MIN_WIND_X_OFFSET, MAX_WIND_X_OFFSET);

                // Magic with checking interval between winds
                if (mWinds.size() > 1) {
                    y = 0;
                    while (y == 0) {
                        float tmp = (float) (mHeaderHeight / (Math.random() * RANDOM_Y_COEFFICIENT));

                        for (Map.Entry<Float, Float> wind : mWinds.entrySet()) {
                            // We want that interval will be greater than fifth part of draggable distance
                            if (Math.abs(wind.getKey() - tmp) > mHeaderHeight / RANDOM_Y_COEFFICIENT) {
                                y = tmp;
                            } else {
                                y = 0;
                                break;
                            }
                        }
                    }
                }

                mWinds.put(y, x);
                drawWind(canvas, y, x, width);
            }

            // Draw current set of wind
            if (mWinds.size() >= WIND_SET_AMOUNT) {
                for (Map.Entry<Float, Float> wind : mWinds.entrySet()) {
                    drawWind(canvas, wind.getKey(), wind.getValue(), width);
                }
            }

            // We should to create new set of winds
            if (mInverseDirection && mNewWindSet) {
                mWinds.clear();
                mNewWindSet = false;
                mWindLineWidth = random(MIN_WIND_LINE_WIDTH, MAX_WIND_LINE_WIDTH);
            }

            // needed for checking direction
            mLastAnimationTime = mLoadingAnimationTime;
        }
        drawAirplane(canvas, width, height);
        drawSideClouds(canvas, width, height);
        drawCenterClouds(canvas, width, height);

        super.dispatchDraw(canvas);
    }

    /**
     * Draw wind on loading animation
     *
     * @param canvas  - area where we will draw
     * @param y       - y position fot one of lines
     * @param xOffset - x offset for on of lines
     */
    private void drawWind(Canvas canvas, float y, float xOffset, int width) {
        /* We should multiply current animation time with this coefficient for taking all screen width in time
        Removing slowing of animation with dividing on {@LINK #SLOW_DOWN_ANIMATION_COEFFICIENT}
        And we should don't forget about distance that should "fly" line that depend on screen of device and x offset
        */
        float cof = (width + xOffset) / (1f * LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);
        float time = mLoadingAnimationTime;

        // HORRIBLE HACK FOR REVERS ANIMATION THAT SHOULD WORK LIKE RESTART ANIMATION
        if (mLastAnimationTime - mLoadingAnimationTime > 0) {
            mInverseDirection = true;
            // take time from 0 to end of animation time
            time = (1f * LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;
        } else {
            mNewWindSet = true;
            mInverseDirection = false;
        }

        // Taking current x position of drawing wind
        // For fully disappearing of line we should subtract wind line width
        float x = (width - (time * cof)) + xOffset - mWindLineWidth;
        float xEnd = x + mWindLineWidth;

        canvas.drawLine(x, y, xEnd, y, mWindPaint);
    }

    private void drawSideClouds(Canvas canvas, int width, int height) {
        Matrix matrix = mMatrix;
        matrix.reset();

        Drawable mCloudLeft = mCloudCenter;
        Drawable mCloudRight = mCloudCenter;

        // Drag percent will newer get more then 1 here
        float dragPercent = Math.min(1f, Math.abs(mPercent));

        final View thisView = this;
        if (thisView.isInEditMode()) {
            dragPercent = 1;
            mHeaderHeight = height;
        }

        float scale;
        float scalePercentDelta = dragPercent - SCALE_START_PERCENT;
        if (scalePercentDelta > 0) {
            float scalePercent = scalePercentDelta / (1.0f - SCALE_START_PERCENT);
            scale = SIDE_CLOUDS_INITIAL_SCALE + (SIDE_CLOUDS_FINAL_SCALE - SIDE_CLOUDS_INITIAL_SCALE) * scalePercent;
        } else {
            scale = SIDE_CLOUDS_INITIAL_SCALE;
        }

        // Current y position of clouds
        float dragYOffset = mHeaderHeight * (1.0f - dragPercent);

        // Position where clouds fully visible on screen and we should drag them with content of listView
//        int cloudsVisiblePosition = mHeaderHeight / 2 - mCloudCenter.height() / 2;

//        boolean needMoveCloudsWithContent = false;
//        if (dragYOffset < cloudsVisiblePosition) {
//            needMoveCloudsWithContent = true;
//        }

        float offsetLeftX = 0 - mCloudLeft.getBounds().width() / 2f;
        float offsetLeftY = (//needMoveCloudsWithContent
                //? mHeaderHeight * dragPercent - mCloudLeftgetBounds().height() :
                dragYOffset);

        float offsetRightX = width - mCloudRight.getBounds().width() / 2f;
        float offsetRightY = (//needMoveCloudsWithContent
                //? mHeaderHeight * dragPercent - mCloudRightgetBounds().height() :
                dragYOffset);

        // Magic with animation on loading process
        if (isRefreshing) {
            if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FIRST)) {
                offsetLeftX -= 2 * getAnimationPartValue(MyTaurusHeader.AnimationPart.FIRST) / Y_SIDE_CLOUDS_SLOW_DOWN_COF;
                offsetRightX += getAnimationPartValue(MyTaurusHeader.AnimationPart.FIRST) / X_SIDE_CLOUDS_SLOW_DOWN_COF;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.SECOND)) {
                offsetLeftX -= 2 * getAnimationPartValue(MyTaurusHeader.AnimationPart.SECOND) / Y_SIDE_CLOUDS_SLOW_DOWN_COF;
                offsetRightX += getAnimationPartValue(MyTaurusHeader.AnimationPart.SECOND) / X_SIDE_CLOUDS_SLOW_DOWN_COF;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.THIRD)) {
                offsetLeftX -= getAnimationPartValue(MyTaurusHeader.AnimationPart.THIRD) / Y_SIDE_CLOUDS_SLOW_DOWN_COF;
                offsetRightX += 2 * getAnimationPartValue(MyTaurusHeader.AnimationPart.THIRD) / X_SIDE_CLOUDS_SLOW_DOWN_COF;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FOURTH)) {
                offsetLeftX -= getAnimationPartValue(MyTaurusHeader.AnimationPart.FOURTH) / X_SIDE_CLOUDS_SLOW_DOWN_COF;
                offsetRightX += 2 * getAnimationPartValue(MyTaurusHeader.AnimationPart.FOURTH) / Y_SIDE_CLOUDS_SLOW_DOWN_COF;
            }
        }

        if (offsetLeftY + scale * mCloudLeft.getBounds().height() < height + 2) {
            offsetLeftY = height + 2 - scale * mCloudLeft.getBounds().height();
        }
        if (offsetRightY + scale * mCloudRight.getBounds().height() < height + 2) {
            offsetRightY = height + 2 - scale * mCloudRight.getBounds().height();
        }

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetLeftX, offsetLeftY);
        matrix.postScale(scale, scale, mCloudLeft.getBounds().width() * 3 / 4f, mCloudLeft.getBounds().height());
        canvas.concat(matrix);
        mCloudLeft.setAlpha(100);
        mCloudLeft.draw(canvas);
        mCloudLeft.setAlpha(255);
        canvas.restoreToCount(saveCount);
        canvas.save();
        canvas.translate(offsetRightX, offsetRightY);
        matrix.postScale(scale, scale, 0, mCloudRight.getBounds().height());
        canvas.concat(matrix);
        mCloudRight.setAlpha(100);
        mCloudRight.draw(canvas);
        mCloudRight.setAlpha(255);
        canvas.restoreToCount(saveCount);
    }

    private void drawCenterClouds(Canvas canvas, int width, int height) {
        Matrix matrix = mMatrix;
        matrix.reset();
        float dragPercent = Math.min(1f, Math.abs(mPercent));

        final View thisView = this;
        if (thisView.isInEditMode()) {
            dragPercent = 1;
            mHeaderHeight = height;
        }

        float scale;
        float overDragPercent = 0;
        boolean overDrag = false;

        if (mPercent > 1.0f) {
            overDrag = true;
            // Here we want know about how mach percent of over drag we done
            overDragPercent = Math.abs(1.0f - mPercent);
        }

        float scalePercentDelta = dragPercent - SCALE_START_PERCENT;
        if (scalePercentDelta > 0) {
            float scalePercent = scalePercentDelta / (1.0f - SCALE_START_PERCENT);
            scale = CENTER_CLOUDS_INITIAL_SCALE + (CENTER_CLOUDS_FINAL_SCALE - CENTER_CLOUDS_INITIAL_SCALE) * scalePercent;
        } else {
            scale = CENTER_CLOUDS_INITIAL_SCALE;
        }

        float parallaxPercent = 0;
        boolean parallax = false;
        // Current y position of clouds
        float dragYOffset = mHeaderHeight * dragPercent;
        // Position when should start parallax scrolling
        int startParallaxHeight = mHeaderHeight - mCloudCenter.getBounds().height() / 2;

        if (dragYOffset > startParallaxHeight) {
            parallax = true;
            parallaxPercent = dragYOffset - startParallaxHeight;
        }

        float offsetX = (width / 2f) - mCloudCenter.getBounds().width() / 2f;
        float offsetY = dragYOffset
                - (parallax ? mCloudCenter.getBounds().height() / 2f + parallaxPercent : mCloudCenter.getBounds().height() / 2f);

        float sx = overDrag ? scale + overDragPercent / 4 : scale;
        float sy = overDrag ? scale + overDragPercent / 2 : scale;

        if (isRefreshing && !overDrag) {
            if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FIRST)) {
                sx = scale - (getAnimationPartValue(MyTaurusHeader.AnimationPart.FIRST) / LOADING_ANIMATION_COEFFICIENT) / 8;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.SECOND)) {
                sx = scale - (getAnimationPartValue(MyTaurusHeader.AnimationPart.SECOND) / LOADING_ANIMATION_COEFFICIENT) / 8;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.THIRD)) {
                sx = scale + (getAnimationPartValue(MyTaurusHeader.AnimationPart.THIRD) / LOADING_ANIMATION_COEFFICIENT) / 6;
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FOURTH)) {
                sx = scale + (getAnimationPartValue(MyTaurusHeader.AnimationPart.FOURTH) / LOADING_ANIMATION_COEFFICIENT) / 6;
            }
            sy = sx;
        }


        matrix.postScale(sx, sy, mCloudCenter.getBounds().width() / 2f, 0);

        if (offsetY + sy * mCloudCenter.getBounds().height() < height + 2) {
            offsetY = height + 2 - sy * mCloudCenter.getBounds().height();
        }

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetX, offsetY);
        canvas.concat(matrix);
        mCloudCenter.draw(canvas);
        canvas.restoreToCount(saveCount);
    }

    private void drawAirplane(Canvas canvas, int width, int height) {
        Matrix matrix = mMatrix;
        matrix.reset();

        float dragPercent = mPercent;
        float rotateAngle = 0;

        final View thisView = this;
        if (thisView.isInEditMode()) {
            dragPercent = 1;
            mHeaderHeight = height;
        }

        // Check overDrag
        if (dragPercent > 1.0f) {
            rotateAngle = 20 * (float) (1 - Math.pow(100, -(dragPercent - 1) / 2));
            dragPercent = 1.0f;
        }

        float offsetX = ((width * dragPercent) / 2) - mAirplane.getBounds().width() / 2f;
        float offsetY = mHeaderHeight * (1 - dragPercent / 2) - mAirplane.getBounds().height() / 2f;

        if (mFinishTransformation > 0) {
            offsetY += (0 - offsetY) * mFinishTransformation;
            offsetX += (width + mAirplane.getBounds().width() - offsetX) * mFinishTransformation;
        }

        if (isRefreshing) {
            if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FIRST)) {
                offsetY -= getAnimationPartValue(MyTaurusHeader.AnimationPart.FIRST);
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.SECOND)) {
                offsetY -= getAnimationPartValue(MyTaurusHeader.AnimationPart.SECOND);
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.THIRD)) {
                offsetY += getAnimationPartValue(MyTaurusHeader.AnimationPart.THIRD);
            } else if (checkCurrentAnimationPart(MyTaurusHeader.AnimationPart.FOURTH)) {
                offsetY += getAnimationPartValue(MyTaurusHeader.AnimationPart.FOURTH);
            }
        }

        if (rotateAngle > 0) {
            matrix.postRotate(rotateAngle,
                    mAirplane.getBounds().width() / 2f,
                    mAirplane.getBounds().height() / 2f);
        }

        final int saveCount = canvas.getSaveCount();
        canvas.save();
        canvas.translate(offsetX, offsetY);
        canvas.rotate(120);
        canvas.concat(matrix);
        mAirplane.draw(canvas);
        canvas.restoreToCount(saveCount);
    }
    //</editor-fold>

    //<editor-fold desc="private">

    private float random(int min, int max) {
        // nextInt is normally exclusive of the top value,
        // so add 1 to make it inclusive
        return mRandom.nextInt((max - min) + 1) + min;
    }

    /**
     * We need a special value for different part of animation
     *
     * @param part - needed part
     * @return - value for needed part
     */
    private float getAnimationPartValue(MyTaurusHeader.AnimationPart part) {
        switch (part) {
            case FIRST: {
                return mLoadingAnimationTime;
            }
            case SECOND: {
                return getAnimationTimePart(MyTaurusHeader.AnimationPart.FOURTH) - (mLoadingAnimationTime - getAnimationTimePart(MyTaurusHeader.AnimationPart.FOURTH));
            }
            case THIRD: {
                return mLoadingAnimationTime - getAnimationTimePart(MyTaurusHeader.AnimationPart.SECOND);
            }
            case FOURTH: {
                return getAnimationTimePart(MyTaurusHeader.AnimationPart.THIRD) - (mLoadingAnimationTime - getAnimationTimePart(MyTaurusHeader.AnimationPart.FOURTH));
            }
            default:
                return 0;
        }
    }

    /**
     * On drawing we should check current part of animation
     *
     * @param part - needed part of animation
     * @return - return true if current part
     */
    private boolean checkCurrentAnimationPart(MyTaurusHeader.AnimationPart part) {
        switch (part) {
            case FIRST: {
                return mLoadingAnimationTime < getAnimationTimePart(MyTaurusHeader.AnimationPart.FOURTH);
            }
            case SECOND:
            case THIRD: {
                return mLoadingAnimationTime < getAnimationTimePart(part);
            }
            case FOURTH: {
                return mLoadingAnimationTime > getAnimationTimePart(MyTaurusHeader.AnimationPart.THIRD);
            }
            default:
                return false;
        }
    }

    /**
     * Get part of animation duration
     *
     * @param part - needed part of time
     * @return - interval of time
     */
    private int getAnimationTimePart(MyTaurusHeader.AnimationPart part) {
        switch (part) {
            case SECOND: {
                return LOADING_ANIMATION_COEFFICIENT / 2;
            }
            case THIRD: {
                return getAnimationTimePart(MyTaurusHeader.AnimationPart.FOURTH) * 3;
            }
            case FOURTH: {
                return LOADING_ANIMATION_COEFFICIENT / 4;
            }
            default:
                return 0;
        }
    }
}